pub mod anagram;
pub mod cache;
pub mod ownership;
pub mod rstype;

/// 方法1
pub fn add_a(a: u32) -> u32 {
    100 + a
}

//rust内存的存储方式有 堆内存 和 栈内存
//栈内存 由编译器或系统自动控制的内存，先进后出速度很快，但是存储的数据大小和生命周期是确定的
//堆内存 是程序运行时动态分配的内存空间，即操作系统或编译器指定的一块够用的动态空间，按需分配，每块空间有各自的地址标注，这个地址就是指针。
//在rust 中是所有权控制堆内存的什么周期的。
//rust所有权规则：
// 1 Rust 中的每一个值都有一个被称为其 所有者（owner）的变量。
// 2 值有且只有一个所有者。
// 3 当所有者（变量）离开作用域，这个值将被丢弃。
// 简单理解为  每个值有唯一拥有者，拥有者无值无。

//简单例子
// {
//     let a = 0;
// }
//外部输出a编译报错

//指针  运行内存地址即视为指针 类型有如下
//1 引用  2 原生引用(unsafe) 3 函数指针  4 智能指针

//引用 都是对原有变量的所有权的借用  使用& mut &mut
//let b = a;//含义：a绑定的资源A转移给b，b拥有这个资源A
//let b = &a;//含义：a绑定的资源A借给b使用，b只有资源A的读权限
//let b = &mut a;//含义：a绑定的资源A借给b使用，b有资源A的读写权限
// let mut b = &mut a;//含义：a绑定的资源A借给b使用，b有资源A的读写权限。同时，b可绑定到新的资源上面去（更新绑定的能力）
